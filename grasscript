#This is a GRASS script that makes the 
#instal grass7
#sudo apt-get install build-essential swig python-psycopg2 python-numpy python-sip python-sip-dev python-wxgtk2.8 curl


v.in.ogr -o dsn=/home/lars/uio/gistick/maps/fy14fy_l.shp output=SF2
v.in.ogr -o dsn=/home/lars/uio/gistick/maps/fy15fy_l.shp output=MR2
v.in.ogr -o dsn=/home/lars/uio/gistick/maps/fy16fy_l.shp output=ST2


v.patch input=MR2,SF2,ST2 out=StudyArea
r.in.gdal input=/home/lars/geodata/10m_DEM.tif output=elevation
g.region -p --o vect=StudyArea align=elevation


r.slope.aspect --o elev=elevation slope=slope aspect=aspect
## Removing zeros from the slope map
r.mapcalc Slope_NoZeros=slope+0.0001

v.in.ogr --overwrite dsn=/home/lars/geodata/coast/coastline_drawn_by_hand.shp output=kyst
# Rasterizing the outer coasline:
v.to.rast in=kyst out=coast_rast column=cat
#I then used a function that calculates a raster map with the distance to to the nearest non-empty grid in the input map. In the coastline raster, the only pixels with any value are the ones that
## constitutes the line:
r.grow.distance input=coast_rast distance=dist_from_coast


#### the map dist_from_coast gives the distance from the outer coastline



#Making a map that consists of only fjords. This was done by giving all areas with elevation = 0, the value 1, and all other values set to 0.
r.mapcalc --o Fjords=elevation==0
#I then divided the previous map by 0, to get nonsense data = NoData values on land
r.mapcalc --o Fjords=Fjords/Fjords
#No we have a map "fjords", that only have values 1 for fjords, and no data on dry land
#Distance from fjords is done with the following command:
r.grow.distance input=Fjords distance=Dist_from_fjords

##### the map "dist.from.fjords" now gives the distance from fjords, or the closest sea water body


# The next map is a bit more complex
# I had to reduce the map region to work with, selecting the counties
g.region -p vect=SF2 align=elevation
## I then made a basin map using threshold 1000 - or minimum 316²m² water basin, and then the next 1sqared km, threshold=10,000.

r.watershed --o elev=elevation threshold=1000 accum=accumulationSF basin=basinSF 
r.watershed --o elev=elevation threshold=10000 accum=accumulation10000SF basin=basin10000SF 

## Since flow accumulation represents the number of upslope cells relative to a given cell, to obtain upslope contributing area, I will multiply flow accumulation by the area of cells in the image. 

r.mapcalc UpslopeContributingAreaSF=accumulationSF*100
r.mapcalc UpslopeContributingArea10000SF=accumulation10000SF*100

r.mapcalc 'WetnessIndexSF=log(UpslopeContributingAreaSF/tan(Slope_NoZeros), 2.718282)'
r.mapcalc 'WetnessIndex10000SF=log(UpslopeContributingArea10000SF/tan(Slope_NoZeros), 2.718282)'

## The two last generated maps are now the wetness index maps, based watershed maps with two different resolutions

## The same for MR
g.region -p vect=MR2 align=elevation
r.watershed --o elev=elevation threshold=1000 accum=accumulationMR basin=basinMR 
r.watershed --o elev=elevation threshold=10000 accum=accumulation10000MR basin=basin10000MR 

## The accumulation maps now quantifies the number of cells that drain through each cell or, in other words, the number of cells that are upslope from a given cell. 

## Since flow accumulation represents the number of upslope cells relative to a given cell, to obtain upslope contributing area, I will multiply flow accumulation by the area of cells in the image. 

r.mapcalc UpslopeContributingAreaMR=accumulationMR*100
r.mapcalc UpslopeContributingArea10000MR=accumulation10000MR*100
r.mapcalc 'WetnessIndexMR=log(UpslopeContributingAreaMR/tan(Slope_NoZeros), 2.718282)'
r.mapcalc 'WetnessIndex10000MR=log(UpslopeContributingArea10000MR/tan(Slope_NoZeros), 2.718282)'


## The two last generated maps are now the wetness index maps, based watershed maps with two different resolutions

## This part must be performed in grass70
## Will also try to make a fully generated wetness index map using r.topidx
g.region -p vect=SF2 align=elevation
#r.topidx input=elevation output=topidxSF
r.watershed --o elev=elevation threshold=1000 tci=tciSF 
r.watershed --o elev=elevation threshold=10000 tci=tci10000SF 

g.region -p vect=MR2 align=elevation
r.watershed --o elev=elevation threshold=1000 tci=tciMR 
r.watershed --o elev=elevation threshold=10000 tci=tci10000MR 

## Combine the MR and SF - maps
r.series --o input=tciSF,tciMR output=tci
r.series --o input=tci10000SF,tci10000MR output=tci10000
r.series --o input=WetnessIndexSF,WetnessIndexMR output=WetnessIndex
r.series --o input=WetnessIndex10000SF,WetnessIndex10000MR output=WetnessIndex10000

## Now I must combine the layers I have made using SF and MR separately.
## The overlaping areas will be calculated as the mean - this will not be any problem, as the Sogn&Fjordane study area stops at Nordfjord, and the Møre&Romsdal study area stops at Tingvoll. None of the survey plots will be affected by the overlapping zone.

v.in.ascii -r --overwrite --verbose input="/home/lars/uio/flattdata/041213flattdata.csv" output=ticksSF separator=tab skip=1

#Must make a new mapset to import the map - setting projection to wgs84 lat lon
g.region n=80 s=60 e=040 w=001  ## Setting region
r.proj in=map location=westcoast mapset=PERMANENT ## IMport map to see that tings look ok
v.in.ascii -r --overwrite --verbose input="/home/lars/uio/flattdata/TickMore2013.csv" output=ticksMR fs=tab skip=1  ## Improt ascii data

## Open the other mapset and location
## Import map
v.proj --o in=ticksMR location=latlon mapset=lars

#r.sun
#r.sunmask

v.db.addcol T columns="slope double precision"


######################################################################################################


r.slope.aspect --o elev=elevation slope=slope aspect=aspect
## Removing zeros from the slope map
r.mapcalc --o Slope_NoZeros=slope+0.0001
#r.sun 

v.in.ogr --overwrite dsn=/home/lars/geodata/coast/coastline_drawn_by_hand.shp output=kyst
# Rasterizing the outer coastline:
v.to.rast in=kyst out=coast_rast column=cat
#I then used a function that calculates a raster map with the distance to to the nearest non-empty grid in the input map. In the coastline raster, the only pixels with any value are the ones that
## constitutes the line:
r.grow.distance input=coast_rast distance=dist_from_coast


#### the map dist_from_coast gives the distance from the outer coastline



#Making a map that consists of only fjords. This was done by giving all areas with elevation = 0, the value 1, and all other values set to 0.
r.mapcalc --o fjords=elevation==0
#I then divided the previous map by 0, to get nonsense data = NoData values on land
v.proj --o in=ticksMR location=latlon mapset=lars
#No we have a map "fjords", that only have values 1 for fjords, and no data on dry land
#Distance from fjords is done with the following command:
r.grow.distance input=fjords distance=dist_from_fjords

##### the map "dist.from.fjords" now gives the distance from fjords, or the closest sea water body


# The next map is a bit more complex
# I had to reduce the map region to work with, selecting the counties
g.region -p vect=StudyArea align=elevation
## I then made a basin map using threshold 1000 - or minimum 316²m² water basin, and then the next 1sqared km, threshold=10,000.


r.sun elevin=elevation aspin=aspect slopein=slope day=140 insol_time=insol 

r.watershed --o elev=elevation threshold=1000 accum=accumulation basin=basin
r.watershed --o elev=elevation threshold=10000 accum=accumulation10000 basin=basin10000

## Since flow accumulation represents the number of upslope cells relative to a given cell, to obtain upslope contributing area, I will multiply flow accumulation by the area of cells in the image. 

r.mapcalc --o UpslopeContributingArea=accumulation*100
r.mapcalc --o UpslopeContributingArea10000=accumulation10000*100

r.mapcalc --o 'WetnessIndex=log(UpslopeContributingArea/tan(Slope_NoZeros), 2.718282)'
r.mapcalc --o 'WetnessIndex10000=log(UpslopeContributingArea10000/tan(Slope_NoZeros), 2.718282)'

## The two last generated maps are now the wetness index maps, based watershed maps with two different resolutions

## This part must be performed in grass70
## Will also try to make a fully generated wetness index map using r.topidx
#r.topidx input=elevation output=topidxSF
r.watershed --o elev=elevation threshold=1000 tci=tci
r.watershed --o elev=elevation threshold=10000 tci=tci10000

v.in.ascii -r --overwrite --verbose input="/home/lars/uio/flattdata/041213flattdata.csv" output=ticksSF separator=tab skip=1
v.proj --o in=ticksMR location=latlon mapset=lars

v.db.addcol T columns="slope double precision"

### Divide into separate areas
g.region -p vect=SF2 align=elevation
r.sun elevin=elevation aspin=aspect slopein=slope day=140 insol_time=insolSF 
g.region -p vect=MR2 align=elevation
r.sun elevin=elevation aspin=aspect slopein=slope day=140 insol_time=insolMR 
g.region -p vect=ST2 align=elevation
r.sun elevin=elevation aspin=aspect slopein=slope day=140 insol_time=insolST 

r.patch input=insolMR,insolSF,insolST out=StudyArea

v.db.addcol T columns="slope double precision"



